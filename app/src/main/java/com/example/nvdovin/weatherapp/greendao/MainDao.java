package com.example.nvdovin.weatherapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.nvdovin.weatherapp.model.Main;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIN".
*/
public class MainDao extends AbstractDao<Main, Long> {

    public static final String TABLENAME = "MAIN";

    /**
     * Properties of entity Main.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Temp = new Property(1, Double.class, "temp", false, "TEMP");
        public final static Property TempMin = new Property(2, Double.class, "tempMin", false, "TEMP_MIN");
        public final static Property TempMax = new Property(3, Double.class, "tempMax", false, "TEMP_MAX");
        public final static Property Pressure = new Property(4, Double.class, "pressure", false, "PRESSURE");
        public final static Property SeaLevel = new Property(5, Double.class, "seaLevel", false, "SEA_LEVEL");
        public final static Property GrndLevel = new Property(6, Double.class, "grndLevel", false, "GRND_LEVEL");
        public final static Property Humidity = new Property(7, Integer.class, "humidity", false, "HUMIDITY");
        public final static Property TempKf = new Property(8, Double.class, "tempKf", false, "TEMP_KF");
    }


    public MainDao(DaoConfig config) {
        super(config);
    }
    
    public MainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEMP\" REAL," + // 1: temp
                "\"TEMP_MIN\" REAL," + // 2: tempMin
                "\"TEMP_MAX\" REAL," + // 3: tempMax
                "\"PRESSURE\" REAL," + // 4: pressure
                "\"SEA_LEVEL\" REAL," + // 5: seaLevel
                "\"GRND_LEVEL\" REAL," + // 6: grndLevel
                "\"HUMIDITY\" INTEGER," + // 7: humidity
                "\"TEMP_KF\" REAL);"); // 8: tempKf
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double temp = entity.getTemp();
        if (temp != null) {
            stmt.bindDouble(2, temp);
        }
 
        Double tempMin = entity.getTempMin();
        if (tempMin != null) {
            stmt.bindDouble(3, tempMin);
        }
 
        Double tempMax = entity.getTempMax();
        if (tempMax != null) {
            stmt.bindDouble(4, tempMax);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(5, pressure);
        }
 
        Double seaLevel = entity.getSeaLevel();
        if (seaLevel != null) {
            stmt.bindDouble(6, seaLevel);
        }
 
        Double grndLevel = entity.getGrndLevel();
        if (grndLevel != null) {
            stmt.bindDouble(7, grndLevel);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(8, humidity);
        }
 
        Double tempKf = entity.getTempKf();
        if (tempKf != null) {
            stmt.bindDouble(9, tempKf);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Main entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double temp = entity.getTemp();
        if (temp != null) {
            stmt.bindDouble(2, temp);
        }
 
        Double tempMin = entity.getTempMin();
        if (tempMin != null) {
            stmt.bindDouble(3, tempMin);
        }
 
        Double tempMax = entity.getTempMax();
        if (tempMax != null) {
            stmt.bindDouble(4, tempMax);
        }
 
        Double pressure = entity.getPressure();
        if (pressure != null) {
            stmt.bindDouble(5, pressure);
        }
 
        Double seaLevel = entity.getSeaLevel();
        if (seaLevel != null) {
            stmt.bindDouble(6, seaLevel);
        }
 
        Double grndLevel = entity.getGrndLevel();
        if (grndLevel != null) {
            stmt.bindDouble(7, grndLevel);
        }
 
        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(8, humidity);
        }
 
        Double tempKf = entity.getTempKf();
        if (tempKf != null) {
            stmt.bindDouble(9, tempKf);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Main readEntity(Cursor cursor, int offset) {
        Main entity = new Main( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // temp
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // tempMin
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // tempMax
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // pressure
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // seaLevel
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // grndLevel
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // humidity
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // tempKf
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Main entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemp(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setTempMin(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setTempMax(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setPressure(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setSeaLevel(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setGrndLevel(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setHumidity(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTempKf(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Main entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Main entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Main entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
